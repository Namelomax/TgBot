import telebot
from telebot import types
import requests
from bs4 import BeautifulSoup
import re
import chardet
import html

TOKEN = "TGToken"
bot = telebot.TeleBot(TOKEN)

URL_first = "https://www.noob-club.ru/index.php?topic=9598.0"
LOCAL_VK_HTML = "vk.html"

# –ø–æ–∏—Å–∫ –ø–æ —Å–∞–π—Ç—É
def get_definitionFirst(term):
    response = requests.get(URL_first)
    if response.status_code != 200:
        return "‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–∞–π—Ç—É."

    soup = BeautifulSoup(response.text, "html.parser")

    for strong in soup.find_all("strong"):
        if re.search(r'\b' + re.escape(term.lower()) + r'\b', strong.get_text(strip=True).lower()):
            br_tag = strong.find_next("br")
            if br_tag and br_tag.next_sibling:
                definition = br_tag.next_sibling.strip()
                return f"{term.capitalize()}:\n{definition}"

    return None

# –ø–æ–∏—Å–∫ –ø–æ —Ñ–∞–π–ª—É
def get_definition_second(term):
    try:
        with open(LOCAL_VK_HTML, "rb") as file:
            raw_data = file.read()
            encoding = chardet.detect(raw_data)['encoding']
        with open(LOCAL_VK_HTML, "r", encoding=encoding) as file:
            html_content = file.read()
    except FileNotFoundError:
        return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏."
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}"

    html_content = html.unescape(html_content)

    pattern = r"\b([\w\s–ê-–Ø–∞-—è–Å—ë]+?)\s*-\s*([^<]+)\b"
    matches = re.findall(pattern, html_content)

    for term_found, definition in matches:
        if term.lower() in term_found.lower():
            return f"{term_found.strip()}:\n{definition.strip()}"

    return None

def get_definition(term):
    definition = get_definitionFirst(term)
    if definition:
        return definition
    definition = get_definition_second(term)
    if definition:
        return definition

    return "‚ùå –¢–µ—Ä–º–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω."

@bot.message_handler(commands=['start'])
def start_bot(message):
    text = (f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –Ø –º–æ–≥—É –ø–æ–º–æ—á—å –Ω–∞–π—Ç–∏ —Ç–µ—Ä–º–∏–Ω—ã.\n"
            "‚úÖ –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /search [—Ç–µ—Ä–º–∏–Ω]\n"
            "‚úÖ –ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü–æ–∏—Å–∫ —Ç–µ—Ä–º–∏–Ω–∞¬ª.")
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ —Ç–µ—Ä–º–∏–Ω–∞", callback_data="search_term"))
    bot.send_message(message.chat.id, text, reply_markup=markup)

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler()
def send_text(message):
    parts = message.text.split(maxsplit=1)
    print(parts)
    term = parts[0]
    definition = get_definition(term)
    if not definition:
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–µ—Ä–º–∏–Ω.")
        return
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üîç –ò—Å–∫–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="search_term"))
    bot.send_message(message.chat.id, definition, reply_markup=markup)

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ø–æ–∏—Å–∫–∞
@bot.message_handler(commands=['search'])
def search_term(message):
    parts = message.text.split(maxsplit=1)
    if len(parts) < 2:
        bot.send_message(message.chat.id, "‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–µ—Ä–º–∏–Ω: /search [—Ç–µ—Ä–º–∏–Ω]")
        return

    term = parts[1]
    definition = get_definition(term)
    if not definition:
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–µ—Ä–º–∏–Ω.")
        return

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üîç –ò—Å–∫–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="search_term"))
    bot.send_message(message.chat.id, definition, reply_markup=markup)

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ø–æ–∏—Å–∫–∞
@bot.callback_query_handler(func=lambda call: call.data == "search_term")
def ask_for_term(call):
    bot.send_message(call.message.chat.id, "üîç –í–≤–µ–¥–∏—Ç–µ —Ç–µ—Ä–º–∏–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞:")
    bot.register_next_step_handler(call.message, process_search)

def process_search(message):
    term = message.text.strip()
    if not term:
        bot.send_message(message.chat.id, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ—Ä–º–∏–Ω.")
        return

    definition = get_definition(term)
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üîç –ò—Å–∫–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="search_term"))
    bot.send_message(message.chat.id, definition, reply_markup=markup)

bot.infinity_polling()